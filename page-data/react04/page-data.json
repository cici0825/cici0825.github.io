{"componentChunkName":"component---src-templates-page-js","path":"/react04","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React 的渲染機制與 VirtualDOM ","date":"16 April 2020","path":"/react04","author":"WuFangCi","excerpt":"寫給自己看的筆記系列","tags":["React","useEffect","useLayoutEffect","week21","VirtualDOM","useCallback","memo"],"coverImage":null},"id":"a6722bc4-b8c2-52ca-a09e-b7f722567f18","html":"<p>參考資料 <a href=\"https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/build-a-simple-virtual-dom-5cf12ccf379f\">實作一個簡易 Virtual DOM 吧！</a></p>\n<blockquote>\n<p>透過實作我們都是更改狀態都是直接對 state 做改變，每當 state 一有動靜 react 就會幫我們 re-render，那 react 的底層是透過什麼方式讓 render 機制變得有效率呢？更精確的問，針對 react 的機制，react 如何快速找到要改變的地方？</p>\n</blockquote>\n<h4>WHY Virtual DOM</h4>\n<ul>\n<li>在目前的網頁中DOM的數目遠遠超過我們練習的作業龐大，當DOM的數目越高，更動DOM的成本也越高，並且會降低網頁上的效能，也可能會增加很多 bug。</li>\n<li>透過 Virtual DOM ，不直接操作 DOM，而是將頁面上的 DOM 經 parse/traversal 為 JavaScript 物件暫存在某個地方，對這些物件操作，然後再更新到 DOM 上，想必會比直接操作 DOM 來得快速許多。因此，使用 Virtual DOM 的最大好處就是提升效能 。</li>\n</ul>\n<p>備註：Virtual DOM 保證的並不是在所有狀況下都比操作原本的 DOM 來得快速，而是在普遍狀況下，不需經手動優化，仍能給予不錯的效能。</p>\n<p>圖示1\n<img src=\"2017-03-31-virtual-dom%202.png\">\n圖示2\n<img src=\"%E6%88%AA%E5%9C%96%202020-12-08%20%E4%B8%8A%E5%8D%8811.24.33.png\"></p>\n<h4>Virtual DOM</h4>\n<p>==<strong>DOM &#x26;Virtual DOM</strong>==</p>\n<ul>\n<li>我們認知的 DOM => <strong>HTML <tag/></strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>newNode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>react 裡的 Virtual DOM  => <strong>JavaScript Obj</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//以下示範，透過 JavaScript 的 Object 偽裝成 虛擬的DOM，大概會長這樣</span>\n <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'myId'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n <span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">//對這個node 新增子節點</span>\n node<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'myId'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 更新目前的 dom tree</span>\n <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>originalNode<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// 以上結果 回傳\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>==<strong>DOM DIFF</strong>==</p>\n<ul>\n<li>透過上一個 Virtual DOM 和 下一個 Virtual DOM 進行比對，找出要改變的地方。</li>\n<li>對真實的 DOM 做改變。</li>\n</ul>\n<p>==<strong>Virtual DOM  應用</strong>==</p>\n<ul>\n<li>而 Virtual DOM 另外一點有趣的是，可以針對不同的應用，進行轉換。</li>\n<li>比如說：解析成 APP 的語法 、 解析成 mark down 的語法。</li>\n<li>\n<p>-</p>\n<hr>\n</li>\n</ul>\n<h1>如何避免 re-render</h1>\n<p>==<strong>原本的 APP.js 程式碼</strong>==</p>\n<ul>\n<li>繼 todo-list 示範</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">,</span>\n    todos<span class=\"token punctuation\">,</span>\n    setTodos<span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">,</span>\n    setValue<span class=\"token punctuation\">,</span>\n    handleChange<span class=\"token punctuation\">,</span>\n    handelButtonClick<span class=\"token punctuation\">,</span>\n    handleToggleIsDone<span class=\"token punctuation\">,</span>\n    handleDeleteTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"APP\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n        placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"add todo...\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handelButtonClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> Add Todo <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>BlackTodoItem\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n          todo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span>\n          handleDeleteTodo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleDeleteTodo<span class=\"token punctuation\">}</span>\n          handleToggleIsDone<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleToggleIsDone<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>==<strong>示範 re-render</strong>==</p>\n<ul>\n<li>把 button 拆出來 做成 component</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">,</span>\n    todos<span class=\"token punctuation\">,</span>\n    setTodos<span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">,</span>\n    setValue<span class=\"token punctuation\">,</span>\n    handleChange<span class=\"token punctuation\">,</span>\n    handelButtonClick<span class=\"token punctuation\">,</span>\n    handleToggleIsDone<span class=\"token punctuation\">,</span>\n    handleDeleteTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"render Button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"APP\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n        placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"add todo...\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handelButtonClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> Add Todo <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>BlackTodoItem\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n          todo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span>\n          handleDeleteTodo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleDeleteTodo<span class=\"token punctuation\">}</span>\n          handleToggleIsDone<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleToggleIsDone<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>拆出來後只要是跟 Button component 掛鉤 的 children ，只要一被更動狀態 Button 就會被 render。但是 Button 跟打字一點關係都沒有，不應該因為打幾個字就重新 render Button。\n<img src=\"%E6%88%AA%E5%9C%96%202020-12-08%20%E4%B8%8B%E5%8D%883.02.09.png\"></p>\n</blockquote>\n<p>==<strong>使 component 不 re-render 的方法</strong>==</p>\n<h3>使用 <strong>#memo (for component)</strong></h3>\n<ul>\n<li><strong>import</strong>： <code class=\"language-text\">import { memo } from &quot;react&quot;;</code></li>\n<li><strong>操作</strong>：Button 包在 memo 裡  <code class=\"language-text\">const MemoButton = memo(Button);</code></li>\n<li><strong>原理</strong>：react 自動檢查如果你傳遞的 <code class=\"language-text\">props { onClick ,children}</code> 都沒有改變的話，就不會 re-render</li>\n</ul>\n<p>看一下 console</p>\n<blockquote>\n<p>結果還是出現了 re-render，原因是因為我們執行 onClick 事件傳進去的 function 每次執行的時候都會不一樣 ， 因為 call by reference 的關係，所以我們可以用另外一個 hooks 來解決這個問題。\n<img src=\"%E6%88%AA%E5%9C%96%202020-12-08%20%E4%B8%8B%E5%8D%883.20.39.png\"></p>\n</blockquote>\n<h3>使用 <strong>#useCallback</strong></h3>\n<ul>\n<li><strong>import</strong>： <code class=\"language-text\">import { useCallback } from &quot;react&quot;;</code></li>\n<li><strong>操作</strong>： handleButtonClick 的function 包在 useCallBack 裡。</li>\n<li><strong>操作</strong>： <code class=\"language-text\">useCallback(function, [])</code>  ，第二個參數為空陣列 當我沒有變動時，function 就不會改變，所以只會在 一開始瀏覽器畫畫面的時候會執行。</li>\n<li>可以想成 react 幫我們記住了這個尚未更動的值。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> handelButtonClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n        content<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>todos<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    id<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>再次檢查 console ， 沒有因為打字而 re-render Button 的問題了。\n<img src=\"%E6%88%AA%E5%9C%96%202020-12-08%20%E4%B8%8B%E5%8D%883.43.48.png\"></p>\n</blockquote>\n<h3>假設錯誤</h3>\n<p>遇到新增上的 BUG => 當我點擊新增的時候，出現的只剩下空的 todos 。</p>\n<blockquote>\n<p>==<strong>檢討原因</strong>==：\n因為我們在第二個參數 加上 [] 空的陣列，告訴 react 這裡不會有改變。\n但是我們點擊事件，的目的是為了新增代辦。\n而代辦事項，是來自我們需要取到 input value 的值。\n因此點擊事件後，\n雖然我們用了 useCallBack  不會重新 render Button 了\n但我們得不到任何 value 的值。</p>\n</blockquote>\n<p>為了讓 todolist 能夠順利新增\n我們要在 useCallBack 的 第二個參數放進 關注的state。於是我們又回到了 re-render 的狀態 XDD。\n就如前面所推，handleButtonClick 是需要 value 的，因為我們選擇 #controller-component {value} ，而不是 #unController  value。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> handelButtonClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n        content<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>todos<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    id<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setValue<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>#useMemo (for data)</h3>\n<ul>\n<li>寫一個新的 component</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> style <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style test render\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>在style 傳進 obj</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"APP\"</span><span class=\"token operator\">></span>\n <span class=\"token comment\">// here</span>\n  \n      <span class=\"token operator\">&lt;</span>Test style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n        placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"add todo...\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>MemoButton onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handelButtonClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> Add Todo <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MemoButton<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>BlackTodoItem\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n          todo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span>\n          handleDeleteTodo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleDeleteTodo<span class=\"token punctuation\">}</span>\n          handleToggleIsDone<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleToggleIsDone<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>看一下 console\n因為我們傳進去的是 obj  ，會遇到 call by reference 的問題 ，每次被呼叫都是指向不同的記憶體位置，因而 re-render。\n<img src=\"%E6%88%AA%E5%9C%96%202020-12-08%20%E4%B8%8B%E5%8D%884.46.40.png\"></p>\n</blockquote>\n<ul>\n<li><strong>import</strong>： <code class=\"language-text\">import { useCallback } from &quot;react&quot;;</code></li>\n<li><strong>操作</strong>： 資料 包在 useCallBack  裡 return</li>\n<li><strong>操作</strong>： <code class=\"language-text\">useMemo(function, [])</code>  ，一樣陣列裡放 關注的值，才會有變動。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> styleObject <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"render style obj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      color<span class=\"token operator\">:</span> value <span class=\"token operator\">?</span> redStyle <span class=\"token operator\">:</span> blueStyle<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"APP\"</span><span class=\"token operator\">></span>\n   <span class=\"token comment\">// here</span>\n      <span class=\"token operator\">&lt;</span>Test style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> styleObject <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n        placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"add todo...\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>MemoButton onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handelButtonClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> Add Todo <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MemoButton<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>BlackTodoItem\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n          todo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span>\n          handleDeleteTodo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleDeleteTodo<span class=\"token punctuation\">}</span>\n          handleToggleIsDone<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleToggleIsDone<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>更改結果：除了 value 改變，才會 re-render，其餘則不會。  <img src=\"%E6%88%AA%E5%9C%96%202020-12-08%20%E4%B8%8B%E5%8D%885.24.12.png\"></p>\n</blockquote>\n<hr>\n<h1>React 特別的事件機制</h1>\n<h4>Even Pooling</h4>\n<p>  我們以為綁在 component 上的事件 ，都是綁在 id=root，用事件代理的機制監聽事件狀態。\n</p>","excerpt":"參考資料 實作一個簡易 Virtual DOM 吧！ 透過實作我們都是更改狀態都是直接對 state 做改變，每當 state 一有動靜 react 就會幫我們 re-render，那 react 的底層是透過什麼方式讓 render…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/react02","title":" 初探 state 實作 TodoList","tags":["React","Babel","webpack","JSX","styled-components","ThemeProvider","week21"]},"fileAbsolutePath":"/Users/fangciwu/gatsby/gatsby-starter-hello-friend/src/posts/react02.md"},"previous":{"frontmatter":{"path":"/react01","title":" 初探 React","tags":["React","Babel","webpack","JSX","styled-components","ThemeProvider","week21"]},"fileAbsolutePath":"/Users/fangciwu/gatsby/gatsby-starter-hello-friend/src/posts/react01.md"}}},"staticQueryHashes":["1425477374","3128451518"]}